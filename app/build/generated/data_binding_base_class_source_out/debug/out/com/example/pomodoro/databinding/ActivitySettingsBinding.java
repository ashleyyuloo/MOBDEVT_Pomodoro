// Generated by view binder compiler. Do not edit!
package com.example.pomodoro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.pomodoro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout LongBreakLayout;

  @NonNull
  public final LinearLayout ShortBreakLayout;

  @NonNull
  public final LinearLayout WorkSessionLayout;

  @NonNull
  public final Button btnColor1;

  @NonNull
  public final Button btnColor2;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayout linearLayout3;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TableLayout tableLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView textView;

  @NonNull
  public final TextView txtLongMin;

  @NonNull
  public final TextView txtLongTitle;

  @NonNull
  public final TextView txtShortMin;

  @NonNull
  public final TextView txtShortTitle;

  @NonNull
  public final TextView txtWorkMin;

  @NonNull
  public final TextView txtWorkTitle;

  private ActivitySettingsBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout LongBreakLayout, @NonNull LinearLayout ShortBreakLayout,
      @NonNull LinearLayout WorkSessionLayout, @NonNull Button btnColor1, @NonNull Button btnColor2,
      @Nullable LinearLayout linearLayout3, @Nullable TableLayout tableLayout,
      @Nullable TextView textView, @NonNull TextView txtLongMin, @NonNull TextView txtLongTitle,
      @NonNull TextView txtShortMin, @NonNull TextView txtShortTitle, @NonNull TextView txtWorkMin,
      @NonNull TextView txtWorkTitle) {
    this.rootView = rootView;
    this.LongBreakLayout = LongBreakLayout;
    this.ShortBreakLayout = ShortBreakLayout;
    this.WorkSessionLayout = WorkSessionLayout;
    this.btnColor1 = btnColor1;
    this.btnColor2 = btnColor2;
    this.linearLayout3 = linearLayout3;
    this.tableLayout = tableLayout;
    this.textView = textView;
    this.txtLongMin = txtLongMin;
    this.txtLongTitle = txtLongTitle;
    this.txtShortMin = txtShortMin;
    this.txtShortTitle = txtShortTitle;
    this.txtWorkMin = txtWorkMin;
    this.txtWorkTitle = txtWorkTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LongBreakLayout;
      LinearLayout LongBreakLayout = ViewBindings.findChildViewById(rootView, id);
      if (LongBreakLayout == null) {
        break missingId;
      }

      id = R.id.ShortBreakLayout;
      LinearLayout ShortBreakLayout = ViewBindings.findChildViewById(rootView, id);
      if (ShortBreakLayout == null) {
        break missingId;
      }

      id = R.id.WorkSessionLayout;
      LinearLayout WorkSessionLayout = ViewBindings.findChildViewById(rootView, id);
      if (WorkSessionLayout == null) {
        break missingId;
      }

      id = R.id.btnColor1;
      Button btnColor1 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor1 == null) {
        break missingId;
      }

      id = R.id.btnColor2;
      Button btnColor2 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor2 == null) {
        break missingId;
      }

      id = R.id.linearLayout3;
      LinearLayout linearLayout3 = ViewBindings.findChildViewById(rootView, id);

      id = R.id.tableLayout;
      TableLayout tableLayout = ViewBindings.findChildViewById(rootView, id);

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txtLongMin;
      TextView txtLongMin = ViewBindings.findChildViewById(rootView, id);
      if (txtLongMin == null) {
        break missingId;
      }

      id = R.id.txtLongTitle;
      TextView txtLongTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtLongTitle == null) {
        break missingId;
      }

      id = R.id.txtShortMin;
      TextView txtShortMin = ViewBindings.findChildViewById(rootView, id);
      if (txtShortMin == null) {
        break missingId;
      }

      id = R.id.txtShortTitle;
      TextView txtShortTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtShortTitle == null) {
        break missingId;
      }

      id = R.id.txtWorkMin;
      TextView txtWorkMin = ViewBindings.findChildViewById(rootView, id);
      if (txtWorkMin == null) {
        break missingId;
      }

      id = R.id.txtWorkTitle;
      TextView txtWorkTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtWorkTitle == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((ConstraintLayout) rootView, LongBreakLayout,
          ShortBreakLayout, WorkSessionLayout, btnColor1, btnColor2, linearLayout3, tableLayout,
          textView, txtLongMin, txtLongTitle, txtShortMin, txtShortTitle, txtWorkMin, txtWorkTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
