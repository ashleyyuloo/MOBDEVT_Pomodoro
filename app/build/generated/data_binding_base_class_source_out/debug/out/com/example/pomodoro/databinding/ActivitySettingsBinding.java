// Generated by view binder compiler. Do not edit!
package com.example.pomodoro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.pomodoro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout LongBreakLayout;

  @NonNull
  public final LinearLayout ShortBreakLayout;

  @NonNull
  public final LinearLayout WorkSessionLayout;

  @NonNull
  public final Button btnColor1;

  @NonNull
  public final Button btnColor10;

  @NonNull
  public final Button btnColor11;

  @NonNull
  public final Button btnColor12;

  @NonNull
  public final Button btnColor13;

  @NonNull
  public final Button btnColor14;

  @NonNull
  public final Button btnColor15;

  @NonNull
  public final Button btnColor16;

  @NonNull
  public final Button btnColor2;

  @NonNull
  public final Button btnColor3;

  @NonNull
  public final Button btnColor4;

  @NonNull
  public final Button btnColor5;

  @NonNull
  public final Button btnColor6;

  @NonNull
  public final Button btnColor7;

  @NonNull
  public final Button btnColor8;

  @NonNull
  public final Button btnColor9;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayout linearLayout3;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TableLayout tableLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView textView;

  @NonNull
  public final TextView txtLongMin;

  @NonNull
  public final TextView txtLongTitle;

  @NonNull
  public final TextView txtShortMin;

  @NonNull
  public final TextView txtShortTitle;

  @NonNull
  public final TextView txtWorkMin;

  @NonNull
  public final TextView txtWorkTitle;

  private ActivitySettingsBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout LongBreakLayout, @NonNull LinearLayout ShortBreakLayout,
      @NonNull LinearLayout WorkSessionLayout, @NonNull Button btnColor1,
      @NonNull Button btnColor10, @NonNull Button btnColor11, @NonNull Button btnColor12,
      @NonNull Button btnColor13, @NonNull Button btnColor14, @NonNull Button btnColor15,
      @NonNull Button btnColor16, @NonNull Button btnColor2, @NonNull Button btnColor3,
      @NonNull Button btnColor4, @NonNull Button btnColor5, @NonNull Button btnColor6,
      @NonNull Button btnColor7, @NonNull Button btnColor8, @NonNull Button btnColor9,
      @Nullable LinearLayout linearLayout3, @Nullable TableLayout tableLayout,
      @Nullable TextView textView, @NonNull TextView txtLongMin, @NonNull TextView txtLongTitle,
      @NonNull TextView txtShortMin, @NonNull TextView txtShortTitle, @NonNull TextView txtWorkMin,
      @NonNull TextView txtWorkTitle) {
    this.rootView = rootView;
    this.LongBreakLayout = LongBreakLayout;
    this.ShortBreakLayout = ShortBreakLayout;
    this.WorkSessionLayout = WorkSessionLayout;
    this.btnColor1 = btnColor1;
    this.btnColor10 = btnColor10;
    this.btnColor11 = btnColor11;
    this.btnColor12 = btnColor12;
    this.btnColor13 = btnColor13;
    this.btnColor14 = btnColor14;
    this.btnColor15 = btnColor15;
    this.btnColor16 = btnColor16;
    this.btnColor2 = btnColor2;
    this.btnColor3 = btnColor3;
    this.btnColor4 = btnColor4;
    this.btnColor5 = btnColor5;
    this.btnColor6 = btnColor6;
    this.btnColor7 = btnColor7;
    this.btnColor8 = btnColor8;
    this.btnColor9 = btnColor9;
    this.linearLayout3 = linearLayout3;
    this.tableLayout = tableLayout;
    this.textView = textView;
    this.txtLongMin = txtLongMin;
    this.txtLongTitle = txtLongTitle;
    this.txtShortMin = txtShortMin;
    this.txtShortTitle = txtShortTitle;
    this.txtWorkMin = txtWorkMin;
    this.txtWorkTitle = txtWorkTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LongBreakLayout;
      LinearLayout LongBreakLayout = ViewBindings.findChildViewById(rootView, id);
      if (LongBreakLayout == null) {
        break missingId;
      }

      id = R.id.ShortBreakLayout;
      LinearLayout ShortBreakLayout = ViewBindings.findChildViewById(rootView, id);
      if (ShortBreakLayout == null) {
        break missingId;
      }

      id = R.id.WorkSessionLayout;
      LinearLayout WorkSessionLayout = ViewBindings.findChildViewById(rootView, id);
      if (WorkSessionLayout == null) {
        break missingId;
      }

      id = R.id.btnColor1;
      Button btnColor1 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor1 == null) {
        break missingId;
      }

      id = R.id.btnColor10;
      Button btnColor10 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor10 == null) {
        break missingId;
      }

      id = R.id.btnColor11;
      Button btnColor11 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor11 == null) {
        break missingId;
      }

      id = R.id.btnColor12;
      Button btnColor12 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor12 == null) {
        break missingId;
      }

      id = R.id.btnColor13;
      Button btnColor13 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor13 == null) {
        break missingId;
      }

      id = R.id.btnColor14;
      Button btnColor14 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor14 == null) {
        break missingId;
      }

      id = R.id.btnColor15;
      Button btnColor15 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor15 == null) {
        break missingId;
      }

      id = R.id.btnColor16;
      Button btnColor16 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor16 == null) {
        break missingId;
      }

      id = R.id.btnColor2;
      Button btnColor2 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor2 == null) {
        break missingId;
      }

      id = R.id.btnColor3;
      Button btnColor3 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor3 == null) {
        break missingId;
      }

      id = R.id.btnColor4;
      Button btnColor4 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor4 == null) {
        break missingId;
      }

      id = R.id.btnColor5;
      Button btnColor5 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor5 == null) {
        break missingId;
      }

      id = R.id.btnColor6;
      Button btnColor6 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor6 == null) {
        break missingId;
      }

      id = R.id.btnColor7;
      Button btnColor7 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor7 == null) {
        break missingId;
      }

      id = R.id.btnColor8;
      Button btnColor8 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor8 == null) {
        break missingId;
      }

      id = R.id.btnColor9;
      Button btnColor9 = ViewBindings.findChildViewById(rootView, id);
      if (btnColor9 == null) {
        break missingId;
      }

      id = R.id.linearLayout3;
      LinearLayout linearLayout3 = ViewBindings.findChildViewById(rootView, id);

      id = R.id.tableLayout;
      TableLayout tableLayout = ViewBindings.findChildViewById(rootView, id);

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txtLongMin;
      TextView txtLongMin = ViewBindings.findChildViewById(rootView, id);
      if (txtLongMin == null) {
        break missingId;
      }

      id = R.id.txtLongTitle;
      TextView txtLongTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtLongTitle == null) {
        break missingId;
      }

      id = R.id.txtShortMin;
      TextView txtShortMin = ViewBindings.findChildViewById(rootView, id);
      if (txtShortMin == null) {
        break missingId;
      }

      id = R.id.txtShortTitle;
      TextView txtShortTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtShortTitle == null) {
        break missingId;
      }

      id = R.id.txtWorkMin;
      TextView txtWorkMin = ViewBindings.findChildViewById(rootView, id);
      if (txtWorkMin == null) {
        break missingId;
      }

      id = R.id.txtWorkTitle;
      TextView txtWorkTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtWorkTitle == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((ConstraintLayout) rootView, LongBreakLayout,
          ShortBreakLayout, WorkSessionLayout, btnColor1, btnColor10, btnColor11, btnColor12,
          btnColor13, btnColor14, btnColor15, btnColor16, btnColor2, btnColor3, btnColor4,
          btnColor5, btnColor6, btnColor7, btnColor8, btnColor9, linearLayout3, tableLayout,
          textView, txtLongMin, txtLongTitle, txtShortMin, txtShortTitle, txtWorkMin, txtWorkTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
